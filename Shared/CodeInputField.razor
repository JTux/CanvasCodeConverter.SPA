@inject IJSRuntime jsRuntime

<div class="output-container">
    <div class="row justify-content-around">
        <div class="col-lg-6 row flex-column">
            <h3 class="box-header">Insert Your Code Here</h3>
            <textarea class="code-box" @bind="Input" @bind:event="oninput"></textarea>
            <div class="d-flex">
                <button class="btn btn-danger rounded-0 col" @onclick="Clear">Clear</button>
            </div>
        </div>
        <div class="col-lg-6 row flex-column">
            <h3 class="box-header">Copy Canvas Compatible Code Here</h3>
            <textarea readonly class="code-box" style="min-height: 40vh;">@Output</textarea>
            @if (Input?.Length > 0)
            {
                <div class="code-box p-2" style="min-height: unset; max-height: 40vh; flex-grow: unset; border-top: none;">
                    @PreviewOutput
                </div>
            }

            <button class="btn btn-primary rounded-0" @onclick="CopyOutput">Copy to Clipboard</button>
        </div>
    </div>
</div>

@code {

    private string Input { get; set; }


    [Parameter]
    public string Language { get; set; }

    [Parameter]
    public bool IsCodeTag { get; set; }

    [Parameter]
    public bool IsTerminal { get; set; }

    [Parameter]
    public bool IsCopyable { get; set; }

    [Parameter]
    public bool MatchBraces { get; set; }

    [Parameter]
    public bool HasLineNumbers { get; set; }

    [Parameter]
    public int StartingLineNumber { get; set; }



    [Parameter]
    public bool HasHighlight { get; set; }

    public string HighlightedLines { get; set; }



    public string PreTagClasses
    {
        get
        {
            List<string> classes = new();

            if (IsTerminal)
                classes.Add("terminal");

            if (IsCopyable)
                classes.Add("copyable");

            if (HasLineNumbers)
                classes.Add("line-numbers");

            return string.Join(' ', classes);
        }
    }

    public string CodeTagClasses
    {
        get
        {
            List<string> classes = new();

            classes.Add(Language);

            if (IsCodeTag)
            {
                if (IsTerminal)
                    classes.Add("terminal");

            }
            if (IsCopyable)
                classes.Add("copyable");

            if (MatchBraces)
                classes.Add("match-braces");

            return string.Join(' ', classes);
        }
    }

    public string Output
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Input))
                return "";

            var content = Input.Replace("<", "&lt;");
            content = content.Replace(">", "&gt;");

            return IsCodeTag ? GetCodeTag(content) : GetPreTag(content);
        }
    }

    private string GetPreTag(string body)
    {
        string preTagData = "";

        if (string.IsNullOrEmpty(PreTagClasses) == false)
            preTagData += $" class=\"{PreTagClasses}\"";

        if (HasLineNumbers)
            preTagData += $" data-start=\"{StartingLineNumber}\"";

        if (HasHighlight)
            preTagData += $" data-line=\"{HighlightedLines}\"";

        return $"<pre{preTagData}><code class=\"{CodeTagClasses}\">{body}</code></pre>";
    }

    private string GetCodeTag(string body)
    {
        return $"<code class=\"{CodeTagClasses}\">{body}</code>";
    }

    private MarkupString PreviewOutput => new MarkupString(Output);

    private async void CopyOutput() => await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Output);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("window.Prism.highlightAll");
    }

    private void Clear()
    {
        Input = "";
    }
}