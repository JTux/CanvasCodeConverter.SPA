@inject IJSRuntime jsRuntime

<div class="output-container">
    <div class="row justify-content-around">
        <div class="col-lg-6 row flex-column">
            <h3 class="box-header">Insert Your Code Here</h3>
            <textarea class="code-box" @bind="Input" @bind:event="oninput"></textarea>
            <div class="d-flex">
                <button class="btn btn-danger rounded-0 col" @onclick="Clear">Clear</button>
                @* <button class="btn btn-primary rounded-0 col" @onclick="Convert">Convert</button> *@
            </div>
        </div>
        <div class="col-lg-6 row flex-column">
            <h3 class="box-header">Copy Canvas Compatible Code Here</h3>
            <textarea readonly class="code-box" style="min-height: 40vh;">@Output</textarea>
            @if (Input?.Length > 0)
            {
                <div class="code-box p-2" style="min-height: unset; max-height: 40vh; flex-grow: unset; border-top: none;">
                    @if (IsCodeTag)
                    {
                        <code class="@Classes">@PreviewOutput</code>
                    }
                    else
                    {
                        <pre class="@Classes">@PreviewOutput</pre>
                    }
                </div>
            }
            @* <textarea readonly class="w-100 h-100" style="resize: none; outline: none;">@Input</textarea> *@

            <button class="btn btn-primary rounded-0" @onclick="CopyOutput">Copy to Clipboard</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsCodeTag { get; set; }

    [Parameter]
    public bool IsTerminal { get; set; }

    [Parameter]
    public bool IsCopyable { get; set; }

    [Parameter]
    public bool HasLineNumbers { get; set; }

    [Parameter]
    public int StartingLineNumber { get; set; }

    private string Input { get; set; }
    @* public string Output { get; set; } *@
    public string Output
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Input))
                return "";

            string tag = IsCodeTag ? "code" : "pre";

            var classList = new List<string>();

            if (IsTerminal)
                classList.Add("terminal");
            if (IsCopyable)
                classList.Add("copyable");

            var classes = string.Join(" ", classList);
            var classAttribute = string.IsNullOrWhiteSpace(classes) ? "" : $" class=\"{classes}\"";

            var content = Input.Replace("<", "&lt;");
            content = content.Replace(">", "&gt;");
            content = content.Replace("\n", "<br/>");
            //content = content.Replace(" ", "&nbsp;");
            //content = content.Replace("&nbsp;&nbsp;", "&emsp;");

            List<string> newLines = new List<string>();
            if (HasLineNumbers)
            {
                var lines = content.Split("<br/>", StringSplitOptions.None).ToList();

                var maxLineNumberDigitCount = (StartingLineNumber + lines.Count - 1).ToString().Length;

                int line = StartingLineNumber;
                for (int i = 0; i < lines.Count; i++)
                {
                    string newLine = "";

                    int lineNumberDigitCount = line.ToString().Length;
                    if (maxLineNumberDigitCount - lineNumberDigitCount > 0)
                        newLine += new string(' ', maxLineNumberDigitCount - lineNumberDigitCount);

                    newLine += $"{line.ToString()}    ";
                    newLine += lines[i];

                    newLines.Add(newLine);

                    line++;
                }

                content = string.Join("<br/>", newLines);
            }

            return $"<{tag}{classAttribute}>{content}</{tag}>";
        }
    }
    public string Classes
    {
        get
        {
            List<string> classes = new List<string>();
            if (IsTerminal)
                classes.Add("terminal");
            if (IsCopyable)
                classes.Add("copyable");

            return string.Join(' ', classes);
        }
    }

    public string PreviewOutput
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Input))
                return "";

            string content = Input;

            List<string> newLines = new List<string>();
            if (HasLineNumbers)
            {
                var lines = Input.Split("\n").ToList();
                @* var lines = Input.Split("<br/>", StringSplitOptions.None).ToList(); *@

                var maxLineNumberDigitCount = (StartingLineNumber + lines.Count - 1).ToString().Length;

                int line = StartingLineNumber;
                for (int i = 0; i < lines.Count; i++)
                {
                    string newLine = "";

                    int lineNumberDigitCount = line.ToString().Length;
                    if (maxLineNumberDigitCount - lineNumberDigitCount > 0)
                        newLine += new string(' ', maxLineNumberDigitCount - lineNumberDigitCount);

                    newLine += $"{line.ToString()}    ";
                    newLine += lines[i];

                    newLines.Add(newLine);

                    line++;
                }

                content = string.Join("\n", newLines);
            }

            return content;
        }
    }

    private void SetOutput()
    {
        if (string.IsNullOrWhiteSpace(Input))
            return;

        string tag = IsCodeTag ? "code" : "pre";

        var classList = new List<string>();

        if (IsTerminal)
            classList.Add("terminal");
        if (IsCopyable)
            classList.Add("copyable");

        var classes = string.Join(" ", classList);
        var classAttribute = string.IsNullOrWhiteSpace(classes) ? "" : $" class=\"{classes}\"";

        var content = Input.Replace("<", "&lt;");
        content = content.Replace(">", "&gt;");
        content = content.Replace("\n", "<br/>");
        //content = content.Replace(" ", "&nbsp;");
        //content = content.Replace("&nbsp;&nbsp;", "&emsp;");

        List<string> newLines = new List<string>();
        if (HasLineNumbers)
        {
            var lines = content.Split("<br/>", StringSplitOptions.None).ToList();

            var maxLineNumberDigitCount = (StartingLineNumber + lines.Count - 1).ToString().Length;

            int line = StartingLineNumber;
            for (int i = 0; i < lines.Count; i++)
            {
                string newLine = "";

                int lineNumberDigitCount = line.ToString().Length;
                if (maxLineNumberDigitCount - lineNumberDigitCount > 0)
                    newLine += new string(' ', maxLineNumberDigitCount - lineNumberDigitCount);

                newLine += $"{line.ToString()} ";
                newLine += lines[i];

                newLines.Add(newLine);

                line++;
            }

            content = string.Join("<br/>", newLines);
        }

        @* Output = $"<{tag}{classAttribute}>{content}</{tag}>"; *@
    }

    private void Convert() => SetOutput();
    private async void CopyOutput() => await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Output);
    private void Clear()
    {
        Input = "";
        @* Output = ""; *@
    }
}