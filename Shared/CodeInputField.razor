@inject IJSRuntime jsRuntime

<div class="row justify-content-around h-100">
    <div class="col-lg-6 row flex-column">
        <h3 class="box-header">Insert Your Code Here</h3>
        <textarea class="code-box" @bind="Input"></textarea>
        <div class="d-flex">
            <button class="btn btn-danger rounded-0 col" @onclick="Clear">Clear</button>
            <button class="btn btn-primary rounded-0 col" @onclick="Convert">Convert</button>
        </div>
    </div>
    <div class="col-lg-6 row flex-column h-100">
        <h3 class="box-header">Copy Canvas Compatible Code Here</h3>
        <textarea readonly class="code-box">@Output</textarea>
        <button class="btn btn-primary rounded-0" @onclick="CopyOutput">Copy to Clipboard</button>
    </div>
</div>

@code {
    [Parameter]
    public bool IsCodeTag { get; set; }

    [Parameter]
    public bool IsTerminal { get; set; }

    [Parameter]
    public bool IsCopyable { get; set; }

    [Parameter]
    public bool HasLineNumbers { get; set; }

    [Parameter]
    public int StartingLineNumber { get; set; }

    private string Input { get; set; }
    public string Output { get; set; }

    private void SetOutput()
    {
        if (string.IsNullOrWhiteSpace(Input))
            return;

        string tag = IsCodeTag ? "code" : "pre";

        var classList = new List<string>();

        if (IsTerminal)
            classList.Add("terminal");
        if (IsCopyable)
            classList.Add("copyable");

        var classes = string.Join(" ", classList);
        var classAttribute = string.IsNullOrWhiteSpace(classes) ? "" : $" class=\"{classes}\"";

        var content = Input.Replace("<", "&lt;");
        content = content.Replace(">", "&gt;");
        content = content.Replace("\n", "<br/>");
        content = content.Replace(" ", "&nbsp;");
        content = content.Replace("&nbsp;&nbsp;", "&emsp;");

        List<string> newLines = new List<string>();
        if (HasLineNumbers)
        {
            var lines = content.Split("<br/>", StringSplitOptions.None).ToList();

            var maxLineNumberDigitCount = (StartingLineNumber + lines.Count - 1).ToString().Length;

            int line = StartingLineNumber;
            for (int i = 0; i < lines.Count; i++)
            {
                string newLine = "";

                int lineNumberDigitCount = line.ToString().Length;
                if (maxLineNumberDigitCount - lineNumberDigitCount > 0)
                    newLine += new string(' ', maxLineNumberDigitCount - lineNumberDigitCount);

                newLine += $"{line.ToString()}&emsp;&emsp;&emsp;&emsp;";
                newLine += lines[i];

                newLines.Add(newLine);

                line++;
            }

            content = string.Join("<br/>", newLines);
        }

        Output = $"<{tag}{classAttribute}>{content}</{tag}>";
    }

    private void Convert() => SetOutput();
    private async void CopyOutput() => await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Output);
    private void Clear()
    {
        Input = "";
        Output = "";
    }
}